#include<iostream>
#include<cstdlib>
using namespace std;

class BST
{
private:
    struct node
    {
        int data;
        node* left,*right;
    }*root;
   node* insertion_p(node* root,int value);
   void display_p(node*root);
    node* deletion_p(node*root,int n);

public:
    BST();
    void insertion(int value);
    node* create(int value);
    void display();
void deletion(int n);
node* minimum( node* root );
};

BST::BST()
{
   root=nullptr;
}

BST::node* BST::create(int value)
{
    node* newnode=new node;
    newnode->data=value;
    newnode->left=newnode->right=nullptr;
    return newnode;
}

BST::node* BST::insertion_p(node* root,int value)
{
    if(root==nullptr)
        root=create(value);

    else
    {
        if(root->data>value)
          root->left=insertion_p(root->left,value);
        else
          root->right=insertion_p(root->right,value);
    }

    return root;
}

void BST::insertion(int value)
{
  root=insertion_p(root,value);
}

void BST::display()
{
  display_p(root);
}

void BST::display_p(node* root)
{
    if(root==nullptr)
        return;
        display_p(root->left);
       cout<<root->data<<" ";
       display_p(root->right);
}

BST::node* BST:: deletion_p(node*root,int n)
{
    if(root==nullptr)
    {
        cout<<endl<<"The key is not in the tree"<<endl;
                return root;
    }

    else if (root->data>n)
      root->left=deletion_p(root->left,n);
    else if(root->data<n)
         root->right=deletion_p(root->right,n);

    else
    {
        //leaf node
        if(root->right==nullptr&&root->left==nullptr)
        {
            root=nullptr;
            return root;
        }
        //node with one child
        else if(root->right==nullptr)
        {
             node* temp=root;
            root=root->left;
            delete(temp);
            return root;
        }
        else if(root->left==nullptr)
        {
            node* temp=root;
            root=root->right;
            delete(temp);
            return root;
        }
        //node with 2 child
        else
        {
           node*temp=minimum(root->right);
           root->data=temp->data;
           root->right=deletion_p(root->right,temp->data);
           return root;
        }
  }
}

BST:: node* BST::minimum( node* root )
{
    if(root->left==NULL)               //while(root->left!=NULL) root=root->left; return root
        return root;
    return minimum(root->left);
}

void BST:: deletion(int n)
{
    deletion_p(root,n);
}

int main()
{
    BST tree;
    tree.insertion(40);
    tree.insertion(50);
    tree.insertion(10);
    tree.insertion(30);
    tree.insertion(70);
    tree.insertion(90);
    tree.insertion(20);
    tree.display();

    tree.deletion(40);
    cout<<"After deleting....."<<endl;
    tree.display();
}


